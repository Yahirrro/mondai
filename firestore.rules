rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{path=**}/participant/{userId} {
      allow read: if request.auth.uid != null
      	&& (request.auth.uid == resource.data.userId || request.auth.uid == userId);
    }
    match /quiz/{quizId} {
    	allow read:
      	if (resource.data.currentStatus != 'creating'
      		|| request.auth.uid in resource.data.permission.owner);
			allow create:
      	if request.auth != null
        	&& request.auth.uid in request.resource.data.permission.owner
          && validateString(incomingData().emoji, 1, 30)
          && validateString(incomingData().title, 1, 512)
          && validateString(incomingData().description, 1, 512);
      allow update: 
      	if (request.auth.uid in resource.data.permission.owner
        	|| request.auth.uid in resource.data.permission.answer)
          	&& request.resource.id == resource.id
            && resource.data.currentStatus != 'archive'
            && validateString(incomingData().emoji, 1, 30)
            && validateString(incomingData().title, 1, 512)
            && validateString(incomingData().description, 1, 512)
            && incomingData().createdAt == existingData().createdAt
            && isUndefined(incomingData(), 'allUser') ? true : incomingData().allUser == existingData().allUser;
      allow delete:
      	if request.auth.uid in resource.data.permission.owner
        	&& resource.data.currentStatus == 'creating';
      
      function isOwner(userId) {
        return userId in get(/databases/$(database)/documents/quiz/$(quizId)).data.permission.owner
      }
      function getCurrentStatus() {
        return get(/databases/$(database)/documents/quiz/$(quizId)).data.currentStatus
      }
      function existsAnswerUser(userId) {
        return exists(/databases/$(database)/documents/quiz/$(quizId)/participant/$(userId))
      }

      match /question/{questionId} {
      	allow read;
        allow create: if isOwner(request.auth.uid);
        allow update:
        	if isOwner(request.auth.uid)
          	&& request.resource.id == resource.id;
        allow delete:
        	if isOwner(request.auth.uid);
      }
      match /message/{messageId} {
      	allow read: if isOwner(request.auth.uid) || existsAnswerUser(request.auth.uid);
        allow create: if isOwner(request.auth.uid);
        allow update:
        	if isOwner(request.auth.uid)
          	&& request.resource.id == resource.id;
        allow delete:
        	if isOwner(request.auth.uid);
      }
      match /participant/{userId} {
      	allow read: if request.auth.uid == resource.id
      		&& request.auth.uid == resource.data.userId;
        allow create: if getCurrentStatus() == 'open'
        	&& request.auth != null
        	&& request.auth.uid == userId
        	&& request.auth.uid == request.resource.data.userId;
        allow update, delete: if false;
      }
      match /answer/{answerId} {
      	allow read;
        allow create: if getCurrentStatus() == 'open'
        	&& request.auth != null
          && existsAnswerUser(request.auth.uid)
        	&& request.resource.data.userId == request.auth.uid;
        allow update, delete: if false;
      }
    }
    
    match /user/{userId} {
    	allow read;
      allow create: if true
      	&& request.auth != null
      	&& request.auth.uid == userId
      	&& request.auth.uid == incomingData().userId;
      allow update: if true
      	&& request.auth != null
      	&& request.auth.uid == userId
      	&& request.auth.uid == incomingData().userId
        && request.auth.uid == request.resource.id;
      allow delete: if false;
    }
    match /topic/{topicId} {
    	allow read: if resource.data.isPublished == true;
    }
  }
}
function isUndefined(data, field) {
  return !data.keys().hasAll([field]);
}
function incomingData() {
  return request.resource.data;
}
function existingData() {
  return resource.data;
}
function validateString(text, min, max) {
  return text is string && min <= text.size() && text.size() <= max;
}