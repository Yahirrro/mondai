rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /quiz/{quizId} {
    	allow read: if resource.data.currentStatus != 'creating'
      	|| (resource.data.permission.keys().toSet().hasAll([request.auth.uid]) == true
      		&& resource.data.permission[request.auth.uid].hasAny(['owner', 'moderator']) == true);
      allow write: if request.auth != null;
      allow update: if resource.data.permission.keys().toSet().hasAll([request.auth.uid]) == true
          && resource.data.permission[request.auth.uid].hasAny(['owner', 'moderator']) == true
          && request.resource.id == resource.id;
      allow delete: if resource.data.permission.keys().toSet().hasAll([request.auth.uid]) == true
      	&& resource.data.permission[request.auth.uid].hasAny(['owner']) == true;
      
      match /question/{questionId} {
      	allow read;
        allow write: if get(/databases/$(database)/documents/quiz/$(quizId)).data.permission[request.auth.uid].hasAny(['owner', 'moderator']) == true;
        allow update:
        	if get(/databases/$(database)/documents/quiz/$(quizId)).data.permission[request.auth.uid].hasAny(['owner', 'moderator']) == true
          	&& request.resource.id == resource.id;
        allow delete: 
        	if get(/databases/$(database)/documents/quiz/$(quizId)).data.permission[request.auth.uid].hasAny(['owner', 'moderator']) == true;
      }
      match /message/{messageId} {
      	allow read;
        allow write: if get(/databases/$(database)/documents/quiz/$(quizId)).data.permission[request.auth.uid].hasAny(['owner', 'moderator']) == true;
        allow update:
        	if get(/databases/$(database)/documents/quiz/$(quizId)).data.permission[request.auth.uid].hasAny(['owner', 'moderator']) == true
          	&& request.resource.id == resource.id;
        allow delete: 
        	if get(/databases/$(database)/documents/quiz/$(quizId)).data.permission[request.auth.uid].hasAny(['owner', 'moderator']) == true;
      }
      match /user/{userId} {
      	allow read;
        allow write: if request.auth != null
        	&& request.resource.data.userId == request.auth.uid;
        allow update, delete: if false;
      }
      match /answer/{answerId} {
      	allow read;
        allow write: if request.auth != null
        	&& request.resource.data.userId == request.auth.uid;
        allow update, delete: if false;
      }
    }
    match /user/{userId} {
    	allow read: if request.auth != null;
      allow write, update: if request.auth != null
      	&& request.resource.data.userId == request.auth.uid
        && request.resource.id == request.auth.uid;
      allow delete: if false;
    }
  }
}